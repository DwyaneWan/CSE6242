-- initial commands
.headers off
.separator ','

-- (a) Import data
-- [insert sql statement(s) below]
DROP TABLE IF EXISTS flights;
CREATE TABLE flights (
airline text, 
flight_number integer, 
origin_airport text, 
destination_airport text, 
departure_delay integer,
distance integer,
arrival_delay integer);
.import flights.csv flights

DROP TABLE IF EXISTS airports;
CREATE TABLE airports (
airport_code text, 
airport text, 
city text, 
state text, 
latitude real, 
longitude real);
.import airports.csv airports

DROP TABLE IF EXISTS airlines;
CREATE TABLE airlines (
airline_code text, 
airline text);
.import airlines.csv airlines

-- (b) Build indexes
-- [insert sql statement(s) below]
CREATE INDEX flights_airline_index on flights (airline);
CREATE INDEX flights_origin_airport_index on flights (origin_airport);
CREATE INDEX flights_destination_airport_index on flights(destination_airport);
CREATE INDEX airport_airport_index on airports (airport_code);
CREATE INDEX airlines_airline_index on airlines(airline_code);

-- (c) Quick computations.
-- [insert sql statement(s) below]

SELECT COUNT(*) FROM flights WHERE destination_airport="SEA" AND arrival_delay > 20;
SELECT COUNT(*) from flights WHERE origin_airport="SFO" AND departure_delay > 20;

select '';

-- (d) Average delay of flights per airline 
-- [insert sql statement(s) below]
SELECT airlines.airline, avg(flights.arrival_delay) 
FROM flights INNER JOIN airlines on flights.airline = airlines.airline_code 
GROUP BY flights.airline 
ORDER BY avg(flights.arrival_delay) DESC LIMIT 5;

select '';

-- (e) Airlines at each airport
-- [insert sql statement(s) below]
SELECT DISTINCT P.airport, L.airline 
FROM flights as F INNER JOIN airlines as L on F.airline = L.airline_code 
INNER JOIN airports as P on P.airport_code = F.origin_airport 
ORDER BY P.airport ASC, L.airline ASC LIMIT 30;


select '';

-- (f) Percentage of delayed flights
-- [insert sql statement(s) below]
SELECT A.airport, (0.0+F.f_count)*100/A.a_count
FROM (SELECT airports.airport, count(flights.arrival_delay) as a_count FROM flights INNER JOIN airports on airports.airport_code = flights.destination_airport 
GROUP BY airports.airport HAVING flights.arrival_delay > 0) as A 
INNER JOIN (SELECT airports.airport, count(flights.arrival_delay) as f_count FROM flights INNER JOIN airports on airports.airport_code = flights.destination_airport WHERE flights.arrival_delay > 30 GROUP BY airports.airport) as F 
on A.airport = F.airport
ORDER BY A.airport ASC LIMIT 20;



select '';

-- (g) Creating a view
-- [insert sql statement(s) below]
DROP VIEW IF EXISTS airport_distances;
CREATE VIEW airport_distances as 
SELECT a1.airport as airport1_name, a2.airport as airport2_name,(a1.latitude-a2.latitude)*(a1.latitude-a2.latitude) as distance 
FROM airports as a1 
CROSS JOIN airports as a2 
WHERE a1.airport < a2.airport ORDER BY a1.airport ASC, a2.airport ASC;

SELECT * FROM airport_distances ORDER BY distance DESC LIMIT 10;

select '';

-- (h) Count total pairs 
-- [insert sql statement(s) below]
SELECT count(*) 
FROM airport_distances;

select '';

-- (i) Create and import data into FTS table movie_overview.
-- [insert sql statement(s) below]
DROP TABLE IF EXISTS movie_overview;
CREATE VIRTUAL TABLE movie_overview 
USING fts4 (id integer, name text, year integer, overview text, popularity decimal);
.separator ,
.import movie-overview.txt movie_overview

-- (i) part 1
-- [insert sql statement(s) below]
SELECT count(distinct id) 
FROM movie_overview 
WHERE overview LIKE "when%";

select '';

-- (i) part 2
-- [insert sql statement(s) below]
SELECT id FROM movie_overview WHERE overview MATCH 'love NEAR/7 hate';
